syntax = "proto3";

package pallas;

// Use C++11 features
option cc_enable_arenas = true;

// Timestamp represents a point in time
message Timestamp {
  // Seconds since Unix epoch
  uint64 seconds = 1;
  // Nanosecond precision
  uint32 nanoseconds = 2;
}

// Point represents a 2D coordinate
message Point {
  // Normalized 0-1 within video frame
  float x = 1;
  float y = 2;
}

// BoundingBox represents a rectangle in the image
message BoundingBox {
  // Top-left x coordinate (normalized 0-1)
  float x = 1;
  // Top-left y coordinate (normalized 0-1)
  float y = 2;
  // Width (normalized 0-1)
  float width = 3;
  // Height (normalized 0-1)
  float height = 4;
}

// Types of objects that can be detected
enum DetectionType {
  DETECTION_TYPE_UNKNOWN = 0;
  DETECTION_TYPE_PERSON = 1;
  DETECTION_TYPE_VEHICLE = 2;
  DETECTION_TYPE_ANIMAL = 3;
}

// Detection represents an object found in a frame
message Detection {
  // Type of detected object
  DetectionType type = 1;
  // Location in the frame
  BoundingBox bounding_box = 2;
  // Detection confidence score (0-1)
  float confidence = 3;
  // Any additional metadata (e.g., "person_name", "authorized")
  repeated string metadata = 4;
}

// Resolution represents image dimensions
message Resolution {
  uint32 width = 1;
  uint32 height = 2;
}

// Image holds the binary data of an image
message Image {
  // Raw image data
  bytes data = 1;
  // Image format (e.g., "jpeg", "png")
  string format = 2;
}

// Camera represents a camera device
message Camera {
  // Unique camera identifier
  string id = 1;
  // User-defined camera name
  string name = 2;
  // Is the camera currently connected
  bool online = 3;
  // User-defined location (e.g., "Front Door")
  string location = 4;
}

// Frame represents a single image capture with metadata
message Frame {
  // The captured image
  Image image = 1;
  // Frame resolution
  Resolution resolution = 2;
  // List of detections in this frame
  repeated Detection detections = 3;
  // When this frame was captured
  Timestamp timestamp = 4;
}

// Feed represents a camera and its current frame
message Feed {
  // Camera information
  Camera camera = 1;
  // Current frame from the camera
  Frame frame = 2;
}

// ListCamerasRequest is sent to retrieve all available cameras
message ListCamerasRequest {
}

// ListCamerasResponse contains all available cameras
message ListCamerasResponse {
  repeated Camera cameras = 1;
}

// GetFrameRequest is sent to retrieve the latest frame from a camera
message GetFrameRequest {
  string camera_id = 1;
}

// GetFrameResponse contains the latest frame from a camera
message GetFrameResponse {
  Frame frame = 1;
}

// Event types that can be tracked
enum EventType {
  EVENT_TYPE_UNKNOWN = 0;
  EVENT_TYPE_MOTION = 1;
  EVENT_TYPE_PERSON_DETECTED = 2;
  EVENT_TYPE_VEHICLE_DETECTED = 3;
  EVENT_TYPE_ANIMAL_DETECTED = 4;
  EVENT_TYPE_CUSTOM_ALERT = 5;
}

// Event represents a significant occurrence in the security system
message Event {
  string id = 1;
  Timestamp timestamp = 2;
  string camera_id = 3;
  EventType type = 4;
  repeated Detection detections = 5;
  Frame frame = 6;
}

// GetEventsRequest is sent to retrieve recent events
message GetEventsRequest {
  string camera_id = 1;
  uint32 count = 2;
}

// GetEventsResponse contains a list of recent events
message GetEventsResponse {
  repeated Event events = 1;
}

// StreamFramesRequest is sent to start streaming frames from a camera
message StreamFramesRequest {
  string camera_id = 1;
}

// StreamFramesResponse contains a stream of frames from a camera
message StreamFramesResponse {
  Frame frame = 1;
}

// CameraService provides methods to interact with cameras
service CameraService {
  // List all available cameras
  rpc ListCameras(ListCamerasRequest) returns (ListCamerasResponse);
  
  // Get the latest frame from a specific camera
  rpc GetFrame(GetFrameRequest) returns (GetFrameResponse);
  
  // Get recent events from a specific camera
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse);
  
  // Stream frames from a specific camera
  rpc StreamFrames(StreamFramesRequest) returns (stream StreamFramesResponse);
}
